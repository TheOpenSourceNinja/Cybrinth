//Cybrinth created by James Dearing, copyright 2012-2014 and licensed under the GNU AGPL (see the file COPYING)
//Single-line comments like this are allowed, and must begin with two slashes (//). Anything before the slashes is considered not part of a comment.
//Preference and value must be separated by a tab character, not spaces.
//Any preference not specified here will use its default value. The same goes for things specified in invalid ways (i.e. putting letters where numbers should be).
//Preferences are not case-sensitive. "Play music" is the same as "PLAY muSic". Preferences and values will be spell-checked.


//Graphics------------------------
Fullscreen	false //Default: false. Determines whether we try to use full-screen graphics.

Bits per pixel	8 //Default: 8. Determines the color depth when running in fullscreen; will be ignored when not running in fullscreen. Note that on the vast majority of systems, changing this setting will have no visible effect.

Wait for vertical sync	true //Default: true. Set this to false if the game seems slow, but expect graphical 'ripping' of moving objects.

Driver type	OpenGL //Default: OpenGL. Possible values are OpenGL, Direct3D9, Direct3D8, Burning's Video, Software, and NULL (only for testing, do not use!). If the selected driver type is not available for your system, the game will automatically choose one that is.

Window size	640x480 //Default: 640x480. Determines how big the game window will be in pixels. The numbers must be separated by an x. Only applicable if not running in fullscreen. If running in fullscreen, the screen resolution will be detected automatically. Playability is not guaranteed at sizes below the default.

Show backgrounds	true //Default: true. Setting this to false can really speed the game up on slow systems like the Raspberry Pi.

Mark player trails	true //Default: false. Makes solving the maze easier by marking where you've already been.


//Sound------------------------
Play music	false //Default: true. If set to true, the game will search for music files in the ./music folder and attempt to play them. Supported music formats may vary from system to system, but generally will include WAVE (.wav), MOD (.mod, .xm, .s3m, .669, .it, or .med), MIDI (.mid), OGG Vorbis (.ogg), MP3 (.mp3), and FLAC (.flac).

Volume	50 //Default: 50. Sets the music volume. Must be an integer between 0 and 100. The volume can be adjusted as the game is playing.


//Controls------------------------
Enable joystick	false //Default: false. If enabled, the program will try to detect and use a joystick

Joystick number	1 //Default: 1. Joysticks are numbered starting with 0. Mine is number 1, so that's the default.


//Multiplayer------------------------
Number of players	1 //Default: 1. This represents the total number of bots and human players. It must be an integer greater than or equal to the number of AI bots and less than or equal to 255. The game supports up to 4 human players on one keyboard. Online play to come soon.

Number of bots	1 //Default: 0. Sets the number of AI bots you play against. Must be an integer less than or equal to the number of players.

Network port	61187 //Default: 61187. This controls which port the server listens for connections on and the clients will attempt to connect to. Ports below 1024 may not work if you're on a Unix-like system and don't have superuser privileges, see https://en.wikipedia.org/w/index.php?title=List_of_TCP_and_UDP_port_numbers&oldid=501310028#Well-known_ports

Always server	true //Default: True until we get networking working. Sets whether this copy of the program will always assume itself to be a server or ask.


//Miscellaneous------------------------
Debug	false //Default: false. Makes the program output more text to standard output. Also makes the AIs insanely fast.

Bots' solving algorithm	Iterative Deepening Depth-First Search //Default: Depth-First Search. Controls which algorithm bots use to solve the maze. Possible values are Depth-First Search (will always find a way to a key/goal, not necessarily the nearest key/goal), Iterative Deepening Depth-First Search (will always find the nearest key/goal, but is really slow. May cause the game to freeze for short periods of time. Not recommended for slow computers! Not fully implemented.), and Left Hand Rule and Right Hand Rule (inefficient).

Bots know the solution	true //Default: false. Whether the bots know the solution or have to find it as they play. Note that they do not necessarily know the *best* solution, just one that works.
